import configparser
import logging

from aiogram import Bot, Dispatcher
from aiogram import executor
from aiogram import types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

from keyboards.inline_keyboards import clothing_keyboard, delivery_keyboard, greeting_keyboards
from services.exchange import get_currency_rate
from texts.greeting_texts import greeting_post, message_text_clothing, message_text_calculate, contacts_post, \
    message_text
from utils.validation import calculate_insurance_price, calculate_commission_price

config = configparser.ConfigParser(empty_lines_in_values=False, allow_no_value=True)
config.read("setting/config.ini")
bot_token = config.get('BOT_TOKEN', 'BOT_TOKEN')

bot = Bot(token=bot_token, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)

"""–ü–æ—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""


@dp.message_handler(commands=['start'])
async def greeting(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –æ–Ω –∂–µ –ø–æ—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    await state.reset_state()
    keyboards_greeting = greeting_keyboards()
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Ü–µ–Ω –∏–ª–∏ –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤
    await message.reply(greeting_post, reply_markup=keyboards_greeting, disable_web_page_preview=True,
                        parse_mode=types.ParseMode.HTML)


"""–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏"""


@dp.callback_query_handler(lambda c: c.data == 'contacts')
async def contacts_handler(callback_query: types.CallbackQuery):
    """–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏"""
    await bot.send_message(callback_query.from_user.id, contacts_post, parse_mode=types.ParseMode.HTML)


"""–¢–∏–ø –æ–¥–µ–∂–¥—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Å–∞"""


@dp.callback_query_handler(lambda c: c.data == 'price_calculator')
async def calculate_cost_handler(callback_query: types.CallbackQuery):
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü–µ–Ω—ã"""
    keyboard_clothes = clothing_keyboard()
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
    await bot.send_message(callback_query.from_user.id, message_text_clothing, reply_markup=keyboard_clothes,
                           parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(lambda c: c.data == 'footwear')
async def calculate_cost_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è üëü –û–±—É–≤—å"""
    delivery = delivery_keyboard()
    await bot.send_message(callback_query.from_user.id, message_text_calculate, reply_markup=delivery,
                           parse_mode=types.ParseMode.HTML)
    exchange_rate = 1
    await state.update_data(exchange_rate=exchange_rate)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∞–Ω–∞–ª–æ–≥ return


@dp.callback_query_handler(lambda c: c.data == 'trousers')
async def calculate_cost_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è üëñ –®—Ç–∞–Ω—ã"""
    delivery = delivery_keyboard()
    await bot.send_message(callback_query.from_user.id, message_text_calculate, reply_markup=delivery,
                           parse_mode=types.ParseMode.HTML)
    exchange_rate = 0.8
    await state.update_data(exchange_rate=exchange_rate)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∞–Ω–∞–ª–æ–≥ return


@dp.callback_query_handler(lambda c: c.data == 'hoodies')
async def calculate_cost_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è ü•º –•—É–¥–∏"""
    delivery = delivery_keyboard()
    await bot.send_message(callback_query.from_user.id, message_text_calculate, reply_markup=delivery,
                           parse_mode=types.ParseMode.HTML)
    exchange_rate = 1
    await state.update_data(exchange_rate=exchange_rate)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∞–Ω–∞–ª–æ–≥ return


@dp.callback_query_handler(lambda c: c.data == 'down_jacket_down')
async def calculate_cost_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è üß• –ü—É—Ö–æ–≤–∏–∫ (–ø—É—Ö)"""
    delivery = delivery_keyboard()
    await bot.send_message(callback_query.from_user.id, message_text_calculate, reply_markup=delivery,
                           parse_mode=types.ParseMode.HTML)
    exchange_rate = 2
    await state.update_data(exchange_rate=exchange_rate)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∞–Ω–∞–ª–æ–≥ return


@dp.callback_query_handler(lambda c: c.data == 'down_jacket_synthetic')
async def calculate_cost_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è üß• –ü—É—Ö–æ–≤–∏–∫ (—Å–∏–Ω—Ç–µ—Ç–∏–∫–∞)"""
    delivery = delivery_keyboard()
    await bot.send_message(callback_query.from_user.id, message_text_calculate, reply_markup=delivery,
                           parse_mode=types.ParseMode.HTML)
    exchange_rate = 1.2
    await state.update_data(exchange_rate=exchange_rate)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∞–Ω–∞–ª–æ–≥ return


@dp.callback_query_handler(lambda c: c.data == 'backpack')
async def calculate_cost_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è üéí –†—é–∫–∑–∞–∫"""
    delivery = delivery_keyboard()
    await bot.send_message(callback_query.from_user.id, message_text_calculate, reply_markup=delivery,
                           parse_mode=types.ParseMode.HTML)
    exchange_rate = 0.6
    await state.update_data(exchange_rate=exchange_rate)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∞–Ω–∞–ª–æ–≥ return


@dp.callback_query_handler(lambda c: c.data == 'shoulder_bag')
async def calculate_cost_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è üëú –°—É–º–∫–∞ –Ω–∞–ø–ª–µ—á–Ω–∞—è"""
    delivery = delivery_keyboard()
    await bot.send_message(callback_query.from_user.id, message_text_calculate, reply_markup=delivery,
                           parse_mode=types.ParseMode.HTML)
    exchange_rate = 0.2
    await state.update_data(exchange_rate=exchange_rate)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∞–Ω–∞–ª–æ–≥ return


@dp.callback_query_handler(lambda c: c.data == 'longsleeve')
async def calculate_cost_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è üëï –õ–æ–Ω–≥—Å–ª–∏–≤ / –º–∞–π–∫–∞"""
    delivery = delivery_keyboard()
    await bot.send_message(callback_query.from_user.id, message_text_calculate, reply_markup=delivery,
                           parse_mode=types.ParseMode.HTML)
    exchange_rate = 0.4
    await state.update_data(exchange_rate=exchange_rate)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∞–Ω–∞–ª–æ–≥ return


"""–í–∏–¥—ã –¥–æ—Å—Ç–∞–≤–∫–∏"""


@dp.callback_query_handler(lambda c: c.data == 'scheduled_aircraft')
async def process_delivery_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö üöÄ –û–ø—Ü–∏—è "1-3 –¥–Ω—è"""
    await bot.send_message(callback_query.from_user.id, message_text, parse_mode=types.ParseMode.HTML)
    usd_rate = get_currency_rate('USD')  # –ö—É—Ä—Å –î–æ–ª–ª–∞—Ä–∞ –∫ —Ä—É–±–ª—é
    data = await state.get_data()
    exchange_rate = data.get('exchange_rate', 0)  # –í–µ—Å —Ç–æ–≤–∞—Ä–∞
    shipping_cost = (35 * usd_rate) * exchange_rate
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∞–Ω–∞–ª–æ–≥ return
    await state.update_data(shipping_cost_min=shipping_cost)


@dp.callback_query_handler(lambda c: c.data == 'accelerated_by_truck')
async def process_delivery_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö üöõ –û–ø—Ü–∏—è "8-15 –¥–Ω–µ–π"""
    await bot.send_message(callback_query.from_user.id, message_text, parse_mode=types.ParseMode.HTML)
    usd_rate = get_currency_rate('USD')  # –ö—É—Ä—Å –î–æ–ª–ª–∞—Ä–∞ –∫ —Ä—É–±–ª—é
    data = await state.get_data()
    exchange_rate = data.get('exchange_rate', 0)  # –í–µ—Å —Ç–æ–≤–∞—Ä–∞
    shipping_cost = (12 * usd_rate) * exchange_rate
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∞–Ω–∞–ª–æ–≥ return
    await state.update_data(shipping_cost_min=shipping_cost)


@dp.callback_query_handler(lambda c: c.data == 'a_regular_truck')
async def process_delivery_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö üöö –û–ø—Ü–∏—è "20-30 –¥–Ω–µ–π"""
    await bot.send_message(callback_query.from_user.id, message_text, parse_mode=types.ParseMode.HTML)
    usd_rate = get_currency_rate('USD')  # –ö—É—Ä—Å –î–æ–ª–ª–∞—Ä–∞ –∫ —Ä—É–±–ª—é
    data = await state.get_data()
    exchange_rate = data.get('exchange_rate', 0)  # –í–µ—Å —Ç–æ–≤–∞—Ä–∞
    shipping_cost = (6 * usd_rate) * exchange_rate
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∞–Ω–∞–ª–æ–≥ return
    await state.update_data(shipping_cost=shipping_cost)


@dp.message_handler(content_types=types.ContentType.TEXT)
async def process_price(message: types.Message, state: FSMContext):
    """
    –ö–æ–Ω–µ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ + –î–æ—Å—Ç–∞–≤–∫–∞ Poizon –¥–æ —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ + –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ +
                                        –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è –≤ –ú–æ—Å–∫–≤—É + –ö–æ–º–∏—Å—Å–∏—è = –ö–æ–Ω–µ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞.
    """
    try:
        cny_rate = get_currency_rate('CNY')  # –ö—É—Ä—Å –Æ–∞–Ω—è –∫ —Ä—É–±–ª—é
        price = float(message.text)  # –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –Æ–∞–Ω—è—Ö –≤–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        delivery_rub_cn = 30 * cny_rate  # –¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ Poizon –¥–æ —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–π
        insurance_price = calculate_insurance_price(price)  # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏
        commission_price = calculate_commission_price(price)  # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ–º–∏—Å—Å–∏–∏
        data = await state.get_data()
        shipping_cost_max = data.get('shipping_cost_max', 0)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –ö–∏—Ç–∞—è –≤ –ú–æ—Å–∫–≤—É
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è
        final_purchase_price = (price * cny_rate) + delivery_rub_cn + insurance_price + shipping_cost_max + \
                                commission_price
        rounded_number = round(final_purchase_price, 2)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å)

        message_text = (f"<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ ‚âà {rounded_number} —Ä—É–±.</b>\n"
                        "\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ –Ω–∞–∂–º–∏—Ç–µ /start")

        await bot.send_message(message.chat.id, message_text)
        await state.finish()
    except ValueError:
        await bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
